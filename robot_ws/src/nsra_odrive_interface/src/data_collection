#!/usr/bin/env python3

from __future__ import print_function

import rospy
from std_msgs.msg import String
from std_msgs.msg import Float64
import odrive
from odrive.enums import *
import time
import math
import rospkg
import numpy as np
from termcolor import colored
import os
import datetime

rospack = rospkg.RosPack()
pack_path = rospack.get_path('nsra_odrive_interface')
file_path = '/home/jetson/NSRA_data/odrive_data'

date = str(datetime.date.today())

if not os.path.exists(file_path):
    os.makedirs(file_path)

from nsra_odrive_interface.srv import *

data_points_axis1 = np.array([[0.0, 0.0]])
data_points_axis2 = np.array([[0.0, 0.0]])
data_points_axis3 = np.array([[0.0, 0.0]])
data_points_axis4 = np.array([[0.0, 0.0]])
data_points_axis5 = np.array([[0.0, 0.0]])
data_points_axis6 = np.array([[0.0, 0.0]])
commandFlag = False

file_counter = 0

if rospy.has_param('data_file_counter'):
    file_counter = rospy.get_param('data_file_counter')
else:
    rospy.set_param('data_file_counter', 0)

print("File counter is: %d" % file_counter)

print("Connecting...")
odrv0 = odrive.find_any(serial_number="205F387F304E")
print(colored("Connected to ODrive 0", 'green'))
odrv1 = odrive.find_any(serial_number="20573882304E")
print(colored("Connected to ODrive 1", 'green'))
odrv2 = odrive.find_any(serial_number="20843881304E")
print(colored("Connected to ODrive 2", 'green'))

should = rospy.Publisher('should', Float64, queue_size=10)
actual = rospy.Publisher('actual', Float64, queue_size=10)

def drive_pub1(data):
    global data_points_axis1

    if commandFlag:
        new_row = np.array([[data.data, odrv1.axis0.encoder.pos_estimate]])
        data_points_axis1 = np.vstack([data_points_axis1, new_row])

def drive_pub2(data):
    global data_points_axis2

    if commandFlag:
        new_row = np.array([[data.data, odrv0.axis0.encoder.pos_estimate]])
        data_points_axis2 = np.vstack([data_points_axis2, new_row])

def drive_pub3(data):
    global data_points_axis3

    if commandFlag:
        new_row = np.array([[data.data, odrv0.axis1.encoder.pos_estimate]])
        data_points_axis3 = np.vstack([data_points_axis3, new_row])

def drive_pub4(data):
    global data_points_axis4

    if commandFlag:
        new_row = np.array([[data.data, odrv2.axis0.encoder.pos_estimate]])
        data_points_axis4 = np.vstack([data_points_axis4, new_row])

def drive_pub5(data):
    global data_points_axis5

    if commandFlag:
        new_row = np.array([[data.data, odrv2.axis1.encoder.pos_estimate]])
        data_points_axis5 = np.vstack([data_points_axis5, new_row])

def drive_pub6(data):
    global data_points_axis6

    if commandFlag:
        new_row = np.array([[data.data, odrv1.axis1.encoder.pos_estimate]])
        data_points_axis6 = np.vstack([data_points_axis6, new_row])

def command(data):
    global commandFlag
    global data_points_axis1
    global data_points_axis2
    global data_points_axis3
    global data_points_axis4
    global data_points_axis5
    global data_points_axis6
    global file_counter
    
    if commandFlag:
        if not os.path.exists(file_path + '/%s-data-%d' % (date, file_counter)):
            os.makedirs(file_path + '/%s-data-%d' % (date, file_counter))

        for i in range(6):
            data_list = None
            if i == 0:
                data_list = data_points_axis1
                data_points_axis1 = np.array([[0.0, 0.0]])
            elif i == 1:
                data_list = data_points_axis2
                data_points_axis2 = np.array([[0.0, 0.0]])
            elif i == 2:
                data_list = data_points_axis3
                data_points_axis3 = np.array([[0.0, 0.0]])
            elif i == 3:
                data_list = data_points_axis4
                data_points_axis4 = np.array([[0.0, 0.0]])
            elif i == 4:
                data_list = data_points_axis5
                data_points_axis5 = np.array([[0.0, 0.0]])
            elif i == 5:
                data_list = data_points_axis6
                data_points_axis6 = np.array([[0.0, 0.0]])
            
            filename = file_path + '/%s-data-%d' % (date, file_counter) + "/data_axis%d_%d.csv" % (i+1, file_counter)
            with open(filename, "w") as out_file:
                num_rows, num_cols = data_list.shape
                out_file.write("should_axis,actual_axis" + "\n")
                for n in range(num_rows-1):
                    out_string = ""
                    out_string += str(data_list[n+1,0])
                    out_string += "," + str(data_list[n+1,1])
                    out_string += "\n"
                    out_file.write(out_string)

            out_file.close() 

        print(colored("Data saved!", 'green'))
        print("Files have number: %d" % file_counter)
        file_counter += 1
        rospy.set_param('data_file_counter', file_counter)
        commandFlag = False
    else:  
        commandFlag = True
        print(colored("Data is registered!", 'green'))

def axis_requested_pos(req):
    print("Axis requested position")

    if req.axis == 1:
        odrv1.axis0.controller.config.vel_limit = 3.0
        odrv1.axis0.controller.input_pos = req.pos

    if req.axis == 2:
        odrv0.axis0.controller.config.vel_limit = 3.0
        odrv0.axis0.controller.input_pos = req.pos

    if req.axis == 3:
        odrv0.axis1.controller.config.vel_limit = 3.0
        odrv0.axis1.controller.input_pos = req.pos
    
    if req.axis == 4:
        odrv2.axis0.controller.config.vel_limit = 3.0
        odrv2.axis0.controller.input_pos = req.pos
    
    if req.axis == 5:
        odrv2.axis1.controller.config.vel_limit = 3.0
        odrv2.axis1.controller.input_pos = req.pos
    
    if req.axis == 6:
        odrv1.axis1.controller.config.vel_limit = 3.0
        odrv1.axis1.controller.input_pos = req.pos

    return requested_posResponse(True)

def axis_requested_state(req):
    print("Axis requested_state")

    if req.axis == 1:
        if req.requested_state == 0:
            odrv1.axis0.requested_state = AXIS_STATE_FULL_CALIBRATION_SEQUENCE
            while odrv1.axis0.current_state != AXIS_STATE_IDLE:
                time.sleep(0.1)
            odrv1.axis0.requested_state = AXIS_STATE_CLOSED_LOOP_CONTROL
        else:
            odrv1.axis0.requested_state = req.requested_state
    if req.axis == 2:
        if req.requested_state == 0:
            odrv0.axis0.requested_state = AXIS_STATE_FULL_CALIBRATION_SEQUENCE
            while odrv0.axis0.current_state != AXIS_STATE_IDLE:
                time.sleep(0.1)
            odrv0.axis0.requested_state = AXIS_STATE_CLOSED_LOOP_CONTROL
        else:
            odrv0.axis0.requested_state = req.requested_state
    if req.axis == 3:
        if req.requested_state == 0:
            odrv0.axis1.requested_state = AXIS_STATE_FULL_CALIBRATION_SEQUENCE
            while odrv0.axis1.current_state != AXIS_STATE_IDLE:
                time.sleep(0.1)
            odrv0.axis1.requested_state = AXIS_STATE_CLOSED_LOOP_CONTROL
        else:
            odrv0.axis1.requested_state = req.requested_state
    if req.axis == 4:
        if req.requested_state == 0:
            odrv2.axis0.requested_state = AXIS_STATE_FULL_CALIBRATION_SEQUENCE
            while odrv2.axis0.current_state != AXIS_STATE_IDLE:
                time.sleep(0.1)
            odrv2.axis0.requested_state = AXIS_STATE_CLOSED_LOOP_CONTROL
        else:
            odrv2.axis0.requested_state = req.requested_state
    if req.axis == 5:
        if req.requested_state == 0:
            odrv2.axis1.requested_state = AXIS_STATE_FULL_CALIBRATION_SEQUENCE
            while odrv2.axis1.current_state != AXIS_STATE_IDLE:
                time.sleep(0.1)
            odrv2.axis1.requested_state = AXIS_STATE_CLOSED_LOOP_CONTROL
        else:
            odrv2.axis1.requested_state = req.requested_state
    if req.axis == 6:
        if req.requested_state == 0:
            odrv1.axis1.requested_state = AXIS_STATE_FULL_CALIBRATION_SEQUENCE
            while odrv1.axis1.current_state != AXIS_STATE_IDLE:
                time.sleep(0.1)
            odrv1.axis1.requested_state = AXIS_STATE_CLOSED_LOOP_CONTROL
        else:
            odrv1.axis1.requested_state = req.requested_state

    return requested_stateResponse(True)

rospy.init_node('odrive1_driver')

rospy.Subscriber("/nsra/drive_pub1", Float64, drive_pub1)
rospy.Subscriber("/nsra/drive_pub2", Float64, drive_pub2)
rospy.Subscriber("/nsra/drive_pub3", Float64, drive_pub3)
rospy.Subscriber("/nsra/drive_pub4", Float64, drive_pub4)
rospy.Subscriber("/nsra/drive_pub5", Float64, drive_pub5)
rospy.Subscriber("/nsra/drive_pub6", Float64, drive_pub6)
rospy.Subscriber("/data_command", String, command)

requested_state = rospy.Service('axis_requested_state', requested_state, axis_requested_state)
requested_position = rospy.Service('axis_requested_position', requested_pos, axis_requested_pos)

rospy.spin()
