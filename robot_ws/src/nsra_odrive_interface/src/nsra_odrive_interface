#!/usr/bin/env python3

############################################################################# 
#  BSD 3-Clause License
# 
#  Copyright (c) 2020, Noa Sendlhofer
#  All rights reserved.
# 
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
# 
#  1. Redistributions of source code must retain the above copyright notice, this
#     list of conditions and the following disclaimer.
# 
#  2. Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions and the following disclaimer in the documentation
#     and/or other materials provided with the distribution.
# 
#  3. Neither the name of the copyright holder nor the names of its
#     contributors may be used to endorse or promote products derived from
#     this software without specific prior written permission.
# 
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
#  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
#  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
############################################################################# 

# Author: Noa Sendlhofer
# Desc:   Handles the USB connection to the ODrives.

from __future__ import print_function

import rospy
from std_msgs.msg import String
from std_msgs.msg import Float64
from std_msgs.msg import Int32
import odrive
from odrive.enums import *
import time
import math

from nsra_odrive_interface.srv import *

positions = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

hz = 20

print("Connecting...")
odrv0 = odrive.find_any(serial_number="205F387F304E")
print("Connected to ODrive 0")
odrv1 = odrive.find_any(serial_number="20573882304E")
print("Connected to ODrive 1")
odrv2 = odrive.find_any(serial_number="20843881304E")
print("Connected to ODrive 2")

def axis_velocity(req):
    print("Change velocity")

    if req.axis == 1:
        odrv1.axis0.controller.config.vel_limit = req.value
    if req.axis == 2:
        odrv0.axis0.controller.config.vel_limit = req.value
    if req.axis == 3:
        odrv0.axis1.controller.config.vel_limit = req.value
    if req.axis == 4:
        odrv2.axis0.controller.config.vel_limit = req.value
    if req.axis == 5:
        odrv2.axis1.controller.config.vel_limit = req.value
    if req.axis == 6:
        odrv1.axis1.controller.config.vel_limit = req.value

    return velocityResponse(True)

def drive_pub1(data):
    #print("Axis 1: " + str(data.data))
    if abs(data.data-positions[0])*hz > (30000/8192):
        odrv1.axis0.controller.config.vel_limit = abs(data.data-positions[0])*hz
    else:
        odrv1.axis0.controller.config.vel_limit  = 30000/8192
    odrv1.axis0.controller.input_pos = data.data
    #drive1.publish(int(data.data*(1024000)/math.pi))
    positions[0] = data.data

def drive_pub2(data):
    #print("Axis 2: " + str(data.data))
    print(abs(data.data-positions[1])*hz)
    if abs(data.data-positions[1])*hz > (65000/8192):
        odrv0.axis0.controller.config.vel_limit = abs(data.data-positions[1])*hz
        #print(abs(data.data-positions[1])*hz)
    else:
        #print(65000/8192)
        odrv0.axis0.controller.config.vel_limit = 65000/8192
    odrv0.axis0.controller.input_pos = data.data
    #drive2.publish(int(data.data*(1024000)/math.pi))
    positions[1] = data.data

def drive_pub3(data):
    #print("Axis 3: " + str(data.data))
    if abs(data.data-positions[2])*hz > (30000/8192):
        odrv0.axis1.controller.config.vel_limit = abs(data.data-positions[2])*hz
    else:
        odrv0.axis1.controller.config.vel_limit = 30000/8192
    odrv0.axis1.controller.input_pos = data.data
    #drive3.publish(int(data.data*(1024000)/math.pi))
    positions[2] = data.data

def drive_pub4(data):
    #print("Axis 4: " + str(data.data))
    if abs(data.data-positions[3])*hz > (20000/8192):
        odrv2.axis0.controller.config.vel_limit = abs(data.data-positions[3])*hz
    else:
        odrv2.axis0.controller.config.vel_limit = 20000/8192
    odrv2.axis0.controller.input_pos = data.data
    #drive4.publish(int(data.data*(1024000)/math.pi))
    positions[3] = data.data

def drive_pub5(data):
    #print("Axis 5: " + str(data.data))
    if abs(data.data-positions[4])*hz > (20000/8192):
        odrv2.axis1.controller.config.vel_limit = abs(data.data-positions[4])*hz
    else:
        odrv2.axis1.controller.config.vel_limit = 20000/8192
    odrv2.axis1.controller.input_pos = data.data
    #drive5.publish(int(data.data*(1024000)/math.pi))
    positions[4] = data.data

def drive_pub6(data):
    #print("Axis 6: " + str(data.data))
    if abs(data.data-positions[5])*hz > (20000/8192):
        odrv1.axis1.controller.config.vel_limit = abs(data.data-positions[5])*hz
    else:
        odrv1.axis1.controller.config.vel_limit = 20000/8192
    odrv1.axis1.controller.input_pos = data.data
    #drive6.publish(int(data.data*(1024000)/math.pi))
    positions[5] = data.data

def axis_position(req):
    print("Axis Postition " + str(req.axis) + ": " + str(positions[req.axis - 1]))
    return feedbackResponse(positions[req.axis - 1])
    """
    if req.axis == 1:
        return feedbackResponse(int(round(odrv1.axis0.encoder.pos_estimate)))
    if req.axis == 2:
        return feedbackResponse(int(round(odrv0.axis0.encoder.pos_estimate)))
    if req.axis == 3:
        return feedbackResponse(int(round(odrv0.axis1.encoder.pos_estimate)))
    if req.axis == 4:
        return feedbackResponse(int(round(odrv2.axis0.encoder.pos_estimate)))
    if req.axis == 5:
        return feedbackResponse(int(round(odrv2.axis1.encoder.pos_estimate)))
    if req.axis == 6:
        return feedbackResponse(int(round(odrv1.axis1.encoder.pos_estimate)))
    """

def axis_requested_state(req):
    print("Axis requested_state")

    if req.axis == 1:
        if req.requested_state == 0:
            odrv1.axis0.requested_state = AXIS_STATE_FULL_CALIBRATION_SEQUENCE
            while odrv1.axis0.current_state != AXIS_STATE_IDLE:
                time.sleep(0.1)
            odrv1.axis0.requested_state = AXIS_STATE_CLOSED_LOOP_CONTROL
        else:
            odrv1.axis0.requested_state = req.requested_state
    if req.axis == 2:
        if req.requested_state == 0:
            odrv0.axis0.requested_state = AXIS_STATE_FULL_CALIBRATION_SEQUENCE
            while odrv0.axis0.current_state != AXIS_STATE_IDLE:
                time.sleep(0.1)
            odrv0.axis0.requested_state = AXIS_STATE_CLOSED_LOOP_CONTROL
        else:
            odrv0.axis0.requested_state = req.requested_state
    if req.axis == 3:
        if req.requested_state == 0:
            odrv0.axis1.requested_state = AXIS_STATE_FULL_CALIBRATION_SEQUENCE
            while odrv0.axis1.current_state != AXIS_STATE_IDLE:
                time.sleep(0.1)
            odrv0.axis1.requested_state = AXIS_STATE_CLOSED_LOOP_CONTROL
        else:
            odrv0.axis1.requested_state = req.requested_state
    if req.axis == 4:
        if req.requested_state == 0:
            odrv2.axis0.requested_state = AXIS_STATE_FULL_CALIBRATION_SEQUENCE
            while odrv2.axis0.current_state != AXIS_STATE_IDLE:
                time.sleep(0.1)
            odrv2.axis0.requested_state = AXIS_STATE_CLOSED_LOOP_CONTROL
        else:
            odrv2.axis0.requested_state = req.requested_state
    if req.axis == 5:
        if req.requested_state == 0:
            odrv2.axis1.requested_state = AXIS_STATE_FULL_CALIBRATION_SEQUENCE
            while odrv2.axis1.current_state != AXIS_STATE_IDLE:
                time.sleep(0.1)
            odrv2.axis1.requested_state = AXIS_STATE_CLOSED_LOOP_CONTROL
        else:
            odrv2.axis1.requested_state = req.requested_state
    if req.axis == 6:
        if req.requested_state == 0:
            odrv1.axis1.requested_state = AXIS_STATE_FULL_CALIBRATION_SEQUENCE
            while odrv1.axis1.current_state != AXIS_STATE_IDLE:
                time.sleep(0.1)
            odrv1.axis1.requested_state = AXIS_STATE_CLOSED_LOOP_CONTROL
        else:
            odrv1.axis1.requested_state = req.requested_state

    return requested_stateResponse(True)

def dump_errors(data):
    if data.data == 0:
        dump_errors(odrv0)
    if data.data == 1:
        dump_errors(odrv1)
    if data.data == 2:
        dump_errors(odrv2)

rospy.init_node('nsra_odrive_interface')

rospy.Subscriber("/nsra/drive_pub1", Float64, drive_pub1)
rospy.Subscriber("/nsra/drive_pub2", Float64, drive_pub2)
rospy.Subscriber("/nsra/drive_pub3", Float64, drive_pub3)
rospy.Subscriber("/nsra/drive_pub4", Float64, drive_pub4)
rospy.Subscriber("/nsra/drive_pub5", Float64, drive_pub5)
rospy.Subscriber("/nsra/drive_pub6", Float64, drive_pub6)

rospy.Subscriber("/dump_errors", Int32, dump_errors)

requested_state = rospy.Service('axis_requested_state', requested_state, axis_requested_state)

rospy.spin()
