#!/usr/bin/python3

############################################################################# 
#  BSD 3-Clause License
# 
#  Copyright (c) 2020, Noa Sendlhofer
#  All rights reserved.
# 
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
# 
#  1. Redistributions of source code must retain the above copyright notice, this
#     list of conditions and the following disclaimer.
# 
#  2. Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions and the following disclaimer in the documentation
#     and/or other materials provided with the distribution.
# 
#  3. Neither the name of the copyright holder nor the names of its
#     contributors may be used to endorse or promote products derived from
#     this software without specific prior written permission.
# 
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
#  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
#  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
############################################################################# 

# Author: Noa Sendlhofer
# Desc:   Part of the NSRA Robot Vision stack. Handles the image ingest for callibration.

import cv2
import nsra_pyndi.finder as finder
import nsra_pyndi.receiver as receiver
import nsra_pyndi.lib as lib
import numpy as np
import rospkg
import sys
import threading
import time
import imutils
import os

#rospack
rospack = rospkg.RosPack()
pack_path = rospack.get_path('nsra_robot_vision')

try:
    os.makedirs(pack_path + '/images')
except:
    pass

try:
    os.makedirs(pack_path + '/config')
except:
    pass

#NDI
find = finder.create_ndi_finder()
NDIsources = find.get_sources()

cam_right_source = None
cam_left_source = None

cams_connected = False
capture_loop = False

timer_started_flag = False

rcam_name = "PC-NOA (TV0200110012)"
lcam_name = "PC-NOA (TV0200110013)"

#cv2.namedWindow("left and right camera", cv2.WND_PROP_FULLSCREEN)
#cv2.setWindowProperty("left and right camera",cv2.WND_PROP_FULLSCREEN,cv2.WINDOW_FULLSCREEN)

if(len(NDIsources) == 2):
    if(NDIsources[0].name == rcam_name):
        cam_right_source = NDIsources[0]
        cam_left_source = NDIsources[1]
    elif(NDIsources[0].name == lcam_name):
        cam_right_source = NDIsources[1]
        cam_left_source = NDIsources[0]
    else:
        print("Detected cameras don't match with the input names") 
    right_camera = receiver.create_receiver(cam_right_source)
    left_camera = receiver.create_receiver(cam_left_source)
    cams_connected = True
else:
    print("Not all cameras were detected")

#findChessboardCorners
criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 30, 0.001)

#Number of images taken
try:
    img_nb = int(sys.argv[1])
except:
    cams_connected = False
    print("Please specify the number of images")

def findCBC_LEFT(img):
    calib_name = pack_path + '/images/left' + str(img_nb + 1) + '.jpg'
    stereo_name = pack_path + '/stereo/left' + str(img_nb + 1) + '.jpg'
    cv2.imwrite(stereo_name, img)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    ret,_ = cv2.findChessboardCorners(gray, (6,9), cv2.CALIB_CB_FAST_CHECK)
    if ret == True:
        cv2.imwrite(calib_name, img)
        print("Success on left image!")
    else:
        if os.path.exists(calib_name):
            os.remove(calib_name)
        print("No corners detected in the left image!")     

def findCBC_RIGHT(img):
    calib_name = pack_path + '/images/right' + str(img_nb + 1) + '.jpg'
    stereo_name = pack_path + '/stereo/right' + str(img_nb + 1) + '.jpg'
    cv2.imwrite(stereo_name, img)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    ret,_ = cv2.findChessboardCorners(gray, (6,9), cv2.CALIB_CB_FAST_CHECK)
    if ret == True:
        cv2.imwrite(calib_name, img)
        print("Success on right image!")
    else:
        if os.path.exists(calib_name):
            os.remove(calib_name)
        print("No corners detected in the right image!")

def img_timer():
    global capture_loop
    capture_loop = True
    if timer_started_flag:
        threading.Timer(7, img_timer).start()

while(cams_connected):
    img_left = left_camera.read()
    img_right = right_camera.read()

    frame_l = cv2.resize(img_left, (960, 640))
    frame_r = cv2.resize(img_right, (960, 640))
    frame_l = cv2.flip(frame_l, 1)
    frame_r = cv2.flip(frame_r, 1)

    cv2.putText(frame_l, cam_left_source.name,(0,30),cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)
    cv2.putText(frame_r, cam_right_source.name,(0,30),cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)

    cv2.putText(frame_r, str(img_nb),(960-50,30),cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

    output_img = np.concatenate((frame_l, frame_r), axis=1)

    cv2.imshow('left and right camera', output_img)

    if capture_loop:
        print("Remaining Images: " + str(img_nb))
        img_nb -= 1

        t1 = threading.Thread(target=findCBC_LEFT, args=(img_left,))
        t2 = threading.Thread(target=findCBC_RIGHT, args=(img_right,))
        t1.start()
        t2.start()
        capture_loop = False

    key = cv2.waitKey(50)
    if key == 27:
        print("User Quit")
        timer_started_flag = False
        break
    elif (key == 13) and (img_nb > 0):
        print("Remaining Images: " + str(img_nb))
        img_nb -= 1

        t1 = threading.Thread(target=findCBC_LEFT, args=(img_left,))
        t2 = threading.Thread(target=findCBC_RIGHT, args=(img_right,))
        t1.start()
        t2.start()
    elif key == 103 and not timer_started_flag: #key: g
        print("Capture loop started!")
        timer_started_flag = True
        img_timer()

    elif img_nb == 0:
        print("All images taken! - Quit program")
        timer_started_flag = False
        break

cv2.destroyAllWindows()     
