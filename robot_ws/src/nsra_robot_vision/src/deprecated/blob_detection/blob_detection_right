#!/usr/bin/python
import cv2
import numpy as np
import rospy
from std_msgs.msg import String

cap = cv2.VideoCapture("rtsp://192.168.1.102")
rl = 90
gl = 40
bl = 100
rh = 115
gh = 255
bh = 255

def paramsChangeCallback(data):
    msg = str(data.data)
    sp_msg = msg.split("/")

    global rl
    global gl
    global bl
    global rh
    global gh
    global bh
    
    rl = int(sp_msg[0])
    gl = int(sp_msg[1])
    bl = int(sp_msg[2])
    rh = int(sp_msg[3])
    gh = int(sp_msg[4])
    bh = int(sp_msg[5])


def dist_to_camera(dist):
    tnew=np.arange(start=702,stop=140,step=-1)
    fvcubic=sp.interpolate.interp1d(t,v,kind='cubic')
    vcubic=fvcubic(tnew)
    return int(vcubic[int(702-dist)])

rospy.init_node('blob_detect_right')
rospy.Subscriber("bdl_params", String, paramsChangeCallback)
pub = rospy.Publisher('blob_right', String, queue_size=10)

while True:
    _, frame = cap.read()
    blur_frame = cv2.GaussianBlur(frame, (5,5), 1)
    hsv_frame = cv2.cvtColor(blur_frame, cv2.COLOR_BGR2HSV)

    # Red color
    low_red = np.array([rl,gl,bl])
    high_red = np.array([rh, gh, bh])
    red_mask = cv2.inRange(hsv_frame, low_red, high_red)

    red_mask = cv2.bitwise_not(red_mask)

    kernal = np.ones((10,10), np.uint8)
    red_mask = cv2.dilate(red_mask, kernal)

    params = cv2.SimpleBlobDetector_Params()

    params.filterByArea = True
    params.minArea = 20
    params.maxArea = 10000

    params.filterByCircularity = True
    params.minCircularity = 0.1

    params.filterByConvexity = True
    params.minConvexity = 0.2

    params.filterByInertia = True
    params.minInertiaRatio = 0.1

    detector = cv2.SimpleBlobDetector_create(params)

    keypoints = detector.detect(red_mask)

    if len(keypoints) == 4:
        x = [keypoints[0].pt[0], keypoints[1].pt[0], keypoints[2].pt[0], keypoints[3].pt[0]]
        x.sort()
        for i in range(4):
            for f in range(4):
                if x[i] == keypoints[f].pt[0]:
                    xa = np.array([[keypoints[f].pt[0], keypoints[f].pt[1]]])
                    if(i == 0):
                        c_points = xa
                    else:
                        c_points = np.append(c_points, xa, axis = 0)
                    #print(str(c_points[f]))
                    break
        #print("original:")
        #print(c_points) 

        if c_points[0,1] > c_points[1,1]:
            c_points[[0,1],:] = c_points[[1,0],:]

        if c_points[2,1] > c_points[3,1]:
            c_points[[2,3],:] = c_points[[3,2],:]

        c_points[[0,2],:] = c_points[[2,0],:]
        c_points[[1,3],:] = c_points[[3,1],:]

        #print("sorted:")
        #print(c_points)

        for i in range(4):
            st = ['1', '2', '3', '4']
            x = int(c_points[i,0])
            y = int(c_points[i,1])
            font = cv2.FONT_HERSHEY_SIMPLEX
            cv2.putText(red_mask,st[i],(x,y), font, 2,(10,10,10),2,cv2.LINE_AA)

    imgKeyPoints = cv2.drawKeypoints(red_mask, keypoints, np.array([]), (0,0,255), cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)
    #imgKeyPoints = cv2.drawKeypoints(blur_frame, keypoints, np.array([]), (0,0,255), cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)

    #font = cv2.FONT_HERSHEY_SIMPLEX
    #cv2.putText(red_mask,'1',(int(c_points[0,0]),int(c_points[0,1])), font, 4,(50,50,50),2,cv2.LINE_AA)

    #retval, corners = cv2.findChessboardCorners(hsv_frame, (6,9), flags=cv2.CALIB_CB_FAST_CHECK)

    #cv2.drawChessboardCorners(blur_frame, (6,9), corners, retval)

    #cv2.imshow("Frame Left", blur_frame)

    #cv2.imshow("Red", red)

    cv2.imshow("Keypoints Right", imgKeyPoints)

    key = cv2.waitKey(1)
    if key == 27:
        print("---------------------")
        #print(values)
        break
    elif key == 10:
        print("x: " + str(c_points[i,0]) + " -- y: " + str(c_points[i,1]))
        pub.publish(String(str(c_points[i,0]) + "/" + str(c_points[i,1])))
        #print(c_points)
        #_ret, rvec, tvec = cv2.solvePnP(i_points, c_points, K, dist_coef)
        #print(rvec)
        #print(tvec)
        #rotM = cv2.Rodrigues(rvec)[0]
        #print(rotM)
        #cameraPosition = -np.matrix(rotM).T * np.matrix(tvec)
        #print(cameraPosition)S

    #rospy.spin()